{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:8082/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false,\n  mode: 'cors'\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  // 将后端的ChatResponse格式转换为前端期望的格式\n  if (response.data) {\n    const originalData = response.data;\n\n    // 处理ChatResponse格式\n    if (originalData.type === 'card_list' && Array.isArray(originalData.payload)) {\n      const cards = originalData.payload;\n      if (cards.length > 0) {\n        // 转换格式：{ type: 'card_list', payload: [...] } -> { data: { card: {...} } }\n        response.data = {\n          data: {\n            card: {\n              ...cards[0],\n              state: originalData.state,\n              trackingId: originalData.trackingId\n            }\n          }\n        };\n        console.log('转换card_list响应格式:', response.data);\n      }\n    } else if (originalData.type === 'text' && originalData.payload) {\n      // 处理文本响应\n      response.data = {\n        data: {\n          card: {\n            id: 'text_response',\n            content: originalData.payload,\n            state: originalData.state,\n            trackingId: originalData.trackingId\n          }\n        }\n      };\n      console.log('转换text响应格式:', response.data);\n    } else if (originalData.type === 'error') {\n      // 处理错误响应\n      response.data = {\n        data: {\n          card: {\n            id: 'error',\n            content: originalData.payload || '处理失败',\n            state: originalData.state,\n            trackingId: originalData.trackingId\n          }\n        }\n      };\n      console.log('转换error响应格式:', response.data);\n    }\n  }\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\n\n// 消费贷相关API\nexport const consumerCreditAPI = {\n  // 获取授信状态\n  getStatus: chatId => api.get(`/consumer-credit/status?chatId=${chatId}`),\n  // 完成步骤\n  completeStep: (chatId, step) => api.post('/consumer-credit/step', {\n    chatId,\n    step\n  }),\n  // 初始化授信流程\n  startCreditProcess: async chatId => {\n    console.log('startCreditProcess called with chatId:', chatId);\n    console.log('Request URL:', `${API_BASE_URL}/consumer-credit/step`);\n    console.log('Request config:', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: false,\n      timeout: 30000\n    });\n    try {\n      const response = await api.post('/consumer-credit/step', {\n        chatId,\n        step: 1\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: false,\n        timeout: 30000\n      });\n      console.log('Response received:', response);\n      return response.data;\n    } catch (error) {\n      console.error('Request failed:', error);\n      console.error('Error config:', error.config);\n      console.error('Error response:', error.response);\n      console.error('Error request:', error.request);\n      throw error;\n    }\n  }\n};\n\n// 助手通用聊天API\nexport const assistantAPI = {\n  /**\r\n   * 与后端助手聊天\r\n   * @param {string} chatId - 会话ID\r\n   * @param {string} userMessage - 用户输入\r\n   * @param {object} [context] - 可选的用户上下文\r\n   * @returns {Promise<string>} 助手回复文本\r\n   */\n  chat: async (chatId, userMessage, context = {}) => {\n    try {\n      const params = {\n        chatId,\n        userMessage\n      };\n      // 可选上下文参数映射\n      if (context) {\n        const {\n          userName,\n          availableCredit,\n          currentLoanPlan,\n          recentRepaymentStatus,\n          maxLoanAmount\n        } = context;\n        if (userName) params.userName = userName;\n        if (availableCredit != null) params.availableCredit = availableCredit;\n        if (currentLoanPlan) params.currentLoanPlan = currentLoanPlan;\n        if (recentRepaymentStatus) params.recentRepaymentStatus = recentRepaymentStatus;\n        if (maxLoanAmount != null) params.maxLoanAmount = maxLoanAmount;\n      }\n      const response = await api.get('/assistant/chat', {\n        params\n      });\n      // 统一将返回值转换为纯文本字符串，避免在 React 中渲染对象导致错误\n      const data = response.data;\n      let textReply = '';\n      if (typeof data === 'string') {\n        textReply = data;\n      } else if (data && typeof data === 'object') {\n        var _data$data;\n        // 兼容响应拦截器转换过的结构 { data: { card: { content: string } } }\n        const card = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.card;\n        if (card && (card.content || card.text)) {\n          textReply = card.content || card.text;\n        } else if (data.payload && typeof data.payload === 'string') {\n          textReply = data.payload;\n        } else if (data.message && typeof data.message === 'string') {\n          textReply = data.message;\n        } else {\n          // 无法解析为文本时，降级为字符串化（避免 React 渲染报错）\n          textReply = JSON.stringify(data);\n        }\n      } else {\n        textReply = '';\n      }\n      return textReply;\n    } catch (error) {\n      console.error('Assistant chat failed:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","withCredentials","mode","interceptors","request","use","config","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","originalData","type","Array","isArray","payload","cards","length","card","state","trackingId","id","content","_error$response","_error$response2","consumerCreditAPI","getStatus","chatId","get","completeStep","step","post","startCreditProcess","assistantAPI","chat","userMessage","context","params","userName","availableCredit","currentLoanPlan","recentRepaymentStatus","maxLoanAmount","textReply","_data$data","text","message","JSON","stringify"],"sources":["D:/workspace/rag-elasticsearch/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:8082/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n  mode: 'cors',\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', response.status, response.data);\r\n    // 将后端的ChatResponse格式转换为前端期望的格式\r\n    if (response.data) {\r\n      const originalData = response.data;\r\n      \r\n      // 处理ChatResponse格式\r\n      if (originalData.type === 'card_list' && Array.isArray(originalData.payload)) {\r\n        const cards = originalData.payload;\r\n        if (cards.length > 0) {\r\n          // 转换格式：{ type: 'card_list', payload: [...] } -> { data: { card: {...} } }\r\n          response.data = {\r\n            data: {\r\n              card: {\r\n                ...cards[0],\r\n                state: originalData.state,\r\n                trackingId: originalData.trackingId\r\n              }\r\n            }\r\n          };\r\n          console.log('转换card_list响应格式:', response.data);\r\n        }\r\n      } else if (originalData.type === 'text' && originalData.payload) {\r\n        // 处理文本响应\r\n        response.data = {\r\n          data: {\r\n            card: {\r\n              id: 'text_response',\r\n              content: originalData.payload,\r\n              state: originalData.state,\r\n              trackingId: originalData.trackingId\r\n            }\r\n          }\r\n        };\r\n        console.log('转换text响应格式:', response.data);\r\n      } else if (originalData.type === 'error') {\r\n        // 处理错误响应\r\n        response.data = {\r\n          data: {\r\n            card: {\r\n              id: 'error',\r\n              content: originalData.payload || '处理失败',\r\n              state: originalData.state,\r\n              trackingId: originalData.trackingId\r\n            }\r\n          }\r\n        };\r\n        console.log('转换error响应格式:', response.data);\r\n      }\r\n    }\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error.response?.status, error.response?.data);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 消费贷相关API\r\nexport const consumerCreditAPI = {\r\n  // 获取授信状态\r\n  getStatus: (chatId) => api.get(`/consumer-credit/status?chatId=${chatId}`),\r\n  \r\n  // 完成步骤\r\n  completeStep: (chatId, step) => api.post('/consumer-credit/step', { chatId, step }),\r\n  \r\n  // 初始化授信流程\r\n  startCreditProcess: async (chatId) => {\r\n    console.log('startCreditProcess called with chatId:', chatId);\r\n    console.log('Request URL:', `${API_BASE_URL}/consumer-credit/step`);\r\n    console.log('Request config:', {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      withCredentials: false,\r\n      timeout: 30000\r\n    });\r\n    try {\r\n      const response = await api.post('/consumer-credit/step', { chatId, step: 1 }, {\r\n        headers: { 'Content-Type': 'application/json' },\r\n        withCredentials: false,\r\n        timeout: 30000\r\n      });\r\n      console.log('Response received:', response);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Request failed:', error);\r\n      console.error('Error config:', error.config);\r\n      console.error('Error response:', error.response);\r\n      console.error('Error request:', error.request);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// 助手通用聊天API\r\nexport const assistantAPI = {\r\n  /**\r\n   * 与后端助手聊天\r\n   * @param {string} chatId - 会话ID\r\n   * @param {string} userMessage - 用户输入\r\n   * @param {object} [context] - 可选的用户上下文\r\n   * @returns {Promise<string>} 助手回复文本\r\n   */\r\n  chat: async (chatId, userMessage, context = {}) => {\r\n    try {\r\n      const params = {\r\n        chatId,\r\n        userMessage,\r\n      };\r\n      // 可选上下文参数映射\r\n      if (context) {\r\n        const { userName, availableCredit, currentLoanPlan, recentRepaymentStatus, maxLoanAmount } = context;\r\n        if (userName) params.userName = userName;\r\n        if (availableCredit != null) params.availableCredit = availableCredit;\r\n        if (currentLoanPlan) params.currentLoanPlan = currentLoanPlan;\r\n        if (recentRepaymentStatus) params.recentRepaymentStatus = recentRepaymentStatus;\r\n        if (maxLoanAmount != null) params.maxLoanAmount = maxLoanAmount;\r\n      }\r\n      const response = await api.get('/assistant/chat', { params });\r\n      // 统一将返回值转换为纯文本字符串，避免在 React 中渲染对象导致错误\r\n      const data = response.data;\r\n      let textReply = '';\r\n      if (typeof data === 'string') {\r\n        textReply = data;\r\n      } else if (data && typeof data === 'object') {\r\n        // 兼容响应拦截器转换过的结构 { data: { card: { content: string } } }\r\n        const card = data?.data?.card;\r\n        if (card && (card.content || card.text)) {\r\n          textReply = card.content || card.text;\r\n        } else if (data.payload && typeof data.payload === 'string') {\r\n          textReply = data.payload;\r\n        } else if (data.message && typeof data.message === 'string') {\r\n          textReply = data.message;\r\n        } else {\r\n          // 无法解析为文本时，降级为字符串化（避免 React 渲染报错）\r\n          textReply = JSON.stringify(data);\r\n        }\r\n      } else {\r\n        textReply = '';\r\n      }\r\n      return textReply;\r\n    } catch (error) {\r\n      console.error('Assistant chat failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}