{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport classnames from 'classnames';\n// ========================= ClassNames =========================\nexport function mergeClassNames(schema, ...classNames) {\n  const mergedSchema = schema || {};\n  return classNames.reduce((acc, cur) => {\n    // Loop keys of the current classNames\n    Object.keys(cur || {}).forEach(key => {\n      const keySchema = mergedSchema[key];\n      const curVal = cur[key];\n      if (keySchema && typeof keySchema === 'object') {\n        if (curVal && typeof curVal === 'object') {\n          // Loop fill\n          acc[key] = mergeClassNames(keySchema, acc[key], curVal);\n        } else {\n          // Covert string to object structure\n          const {\n            _default: defaultField\n          } = keySchema;\n          acc[key] = acc[key] || {};\n          acc[key][defaultField] = classnames(acc[key][defaultField], curVal);\n        }\n      } else {\n        // Flatten fill\n        acc[key] = classnames(acc[key], curVal);\n      }\n    });\n    return acc;\n  }, {});\n}\nfunction useSemanticClassNames(schema, ...classNames) {\n  return React.useMemo(() => mergeClassNames.apply(void 0, [schema].concat(classNames)), [classNames]);\n}\n// =========================== Styles ===========================\nfunction useSemanticStyles(...styles) {\n  return React.useMemo(() => {\n    return styles.reduce((acc, cur = {}) => {\n      Object.keys(cur).forEach(key => {\n        acc[key] = Object.assign(Object.assign({}, acc[key]), cur[key]);\n      });\n      return acc;\n    }, {});\n  }, [styles]);\n}\n// =========================== Export ===========================\nfunction fillObjectBySchema(obj, schema) {\n  const newObj = Object.assign({}, obj);\n  Object.keys(schema).forEach(key => {\n    if (key !== '_default') {\n      const nestSchema = schema[key];\n      const nextValue = newObj[key] || {};\n      newObj[key] = nestSchema ? fillObjectBySchema(nextValue, nestSchema) : nextValue;\n    }\n  });\n  return newObj;\n}\n/**\n * Merge classNames and styles from multiple sources.\n * When `schema` is provided, it will **must** provide the nest object structure.\n */\nexport default function useMergeSemantic(classNamesList, stylesList, schema) {\n  const mergedClassNames = useSemanticClassNames.apply(void 0, [schema].concat(_toConsumableArray(classNamesList)));\n  const mergedStyles = useSemanticStyles.apply(void 0, _toConsumableArray(stylesList));\n  return React.useMemo(() => {\n    return [fillObjectBySchema(mergedClassNames, schema), fillObjectBySchema(mergedStyles, schema)];\n  }, [mergedClassNames, mergedStyles]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}