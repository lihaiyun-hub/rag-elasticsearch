{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:8082/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false,\n  mode: 'cors'\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  // 将后端的ChatResponse格式转换为前端期望的格式\n  if (response.data) {\n    const originalData = response.data;\n\n    // 处理ChatResponse格式\n    if (originalData.type === 'card_list' && Array.isArray(originalData.payload)) {\n      const cards = originalData.payload;\n      if (cards.length > 0) {\n        // 转换格式：{ type: 'card_list', payload: [...] } -> { data: { card: {...} } }\n        response.data = {\n          data: {\n            card: {\n              ...cards[0],\n              state: originalData.state,\n              trackingId: originalData.trackingId\n            }\n          }\n        };\n        console.log('转换card_list响应格式:', response.data);\n      }\n    } else if (originalData.type === 'text' && originalData.payload) {\n      // 处理文本响应\n      response.data = {\n        data: {\n          card: {\n            id: 'text_response',\n            content: originalData.payload,\n            state: originalData.state,\n            trackingId: originalData.trackingId\n          }\n        }\n      };\n      console.log('转换text响应格式:', response.data);\n    } else if (originalData.type === 'error') {\n      // 处理错误响应\n      response.data = {\n        data: {\n          card: {\n            id: 'error',\n            content: originalData.payload || '处理失败',\n            state: originalData.state,\n            trackingId: originalData.trackingId\n          }\n        }\n      };\n      console.log('转换error响应格式:', response.data);\n    }\n  }\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\n\n// 消费贷相关API\nexport const consumerCreditAPI = {\n  // 获取授信状态\n  getStatus: chatId => api.get(`/consumer-credit/status?chatId=${chatId}`),\n  // 完成步骤\n  completeStep: async (chatId, step) => {\n    const response = await api.post('/consumer-credit/step', {\n      chatId,\n      step\n    });\n    return response.data;\n  },\n  // 初始化授信流程（允许自定义起始步骤）\n  startCreditProcess: async (chatId, startStep = 1) => {\n    console.log('startCreditProcess called with chatId:', chatId, 'startStep:', startStep);\n    console.log('Request URL:', `${API_BASE_URL}/consumer-credit/step`);\n    console.log('Request config:', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: false,\n      timeout: 30000\n    });\n    try {\n      const response = await api.post('/consumer-credit/step', {\n        chatId,\n        step: startStep\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: false,\n        timeout: 30000\n      });\n      console.log('Response received:', response);\n      return response.data;\n    } catch (error) {\n      console.error('Request failed:', error);\n      console.error('Error config:', error.config);\n      console.error('Error response:', error.response);\n      console.error('Error request:', error.request);\n      throw error;\n    }\n  }\n  // setAuthorization: async (chatId, authorized) => {\n  //   // 前端不再直接调用后端更新授权状态；统一通过聊天请求上下文传递\n  //   const response = await api.post('/consumer-credit/authorize', { chatId, authorized });\n  //   return response.data;\n  // },\n};\n\n// 助手通用聊天API\nexport const assistantAPI = {\n  /**\r\n   * 与后端助手聊天\r\n   * @param {string} chatId - 会话ID\r\n   * @param {string} userMessage - 用户输入\r\n   * @param {object} [context] - 可选的用户上下文\r\n   * @returns {Promise<{text: string, card: object|null, raw: any}>} 助手回复结构化结果\r\n   */\n  chat: async (chatId, userMessage, context = {}) => {\n    try {\n      const body = {\n        chatId,\n        userMessage\n      };\n      if (context) {\n        const {\n          userName,\n          availableCredit,\n          currentLoanPlan,\n          recentRepaymentStatus,\n          maxLoanAmount,\n          authorized\n        } = context;\n        if (userName) body.userName = userName;\n        if (availableCredit != null) body.availableCredit = availableCredit;\n        if (currentLoanPlan) body.currentLoanPlan = currentLoanPlan;\n        if (recentRepaymentStatus) body.recentRepaymentStatus = recentRepaymentStatus;\n        if (maxLoanAmount != null) body.maxLoanAmount = maxLoanAmount;\n        if (authorized != null) body.authorized = authorized;\n      }\n      const response = await api.post('/assistant/chat', body);\n      const data = response.data;\n      let textReply = '';\n      let cardObj = null;\n      if (typeof data === 'string') {\n        textReply = data;\n      } else if (data && typeof data === 'object') {\n        var _data$data;\n        const card = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.card;\n        if (card) {\n          // 兼容后端 payload.offer 以字符串形式返回：解析为对象并提升为 card.offer\n          if (card.payload && typeof card.payload.offer === 'string') {\n            try {\n              const parsed = JSON.parse(card.payload.offer);\n              card.offer = parsed;\n              card.payload.offer = parsed;\n            } catch (e) {\n              console.warn('解析 payload.offer 失败:', e);\n            }\n          }\n          cardObj = card;\n        }\n        if (card && (card.content || card.text)) {\n          textReply = card.content || card.text;\n        } else if (data.payload && typeof data.payload === 'string') {\n          textReply = data.payload;\n        } else if (data.message && typeof data.message === 'string') {\n          textReply = data.message;\n        } else {\n          // 无明确文本时不再返回JSON字符串，避免在聊天窗显示原始结构\n          textReply = '';\n        }\n      } else {\n        textReply = '';\n      }\n      return {\n        text: textReply,\n        card: cardObj,\n        raw: data\n      };\n    } catch (error) {\n      console.error('Assistant chat failed:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","withCredentials","mode","interceptors","request","use","config","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","originalData","type","Array","isArray","payload","cards","length","card","state","trackingId","id","content","_error$response","_error$response2","consumerCreditAPI","getStatus","chatId","get","completeStep","step","post","startCreditProcess","startStep","assistantAPI","chat","userMessage","context","body","userName","availableCredit","currentLoanPlan","recentRepaymentStatus","maxLoanAmount","authorized","textReply","cardObj","_data$data","offer","parsed","JSON","parse","e","warn","text","message","raw"],"sources":["D:/workspace/rag-elasticsearch/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:8082/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n  mode: 'cors',\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', response.status, response.data);\r\n    // 将后端的ChatResponse格式转换为前端期望的格式\r\n    if (response.data) {\r\n      const originalData = response.data;\r\n      \r\n      // 处理ChatResponse格式\r\n      if (originalData.type === 'card_list' && Array.isArray(originalData.payload)) {\r\n        const cards = originalData.payload;\r\n        if (cards.length > 0) {\r\n          // 转换格式：{ type: 'card_list', payload: [...] } -> { data: { card: {...} } }\r\n          response.data = {\r\n            data: {\r\n              card: {\r\n                ...cards[0],\r\n                state: originalData.state,\r\n                trackingId: originalData.trackingId\r\n              }\r\n            }\r\n          };\r\n          console.log('转换card_list响应格式:', response.data);\r\n        }\r\n      } else if (originalData.type === 'text' && originalData.payload) {\r\n        // 处理文本响应\r\n        response.data = {\r\n          data: {\r\n            card: {\r\n              id: 'text_response',\r\n              content: originalData.payload,\r\n              state: originalData.state,\r\n              trackingId: originalData.trackingId\r\n            }\r\n          }\r\n        };\r\n        console.log('转换text响应格式:', response.data);\r\n      } else if (originalData.type === 'error') {\r\n        // 处理错误响应\r\n        response.data = {\r\n          data: {\r\n            card: {\r\n              id: 'error',\r\n              content: originalData.payload || '处理失败',\r\n              state: originalData.state,\r\n              trackingId: originalData.trackingId\r\n            }\r\n          }\r\n        };\r\n        console.log('转换error响应格式:', response.data);\r\n      }\r\n    }\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error.response?.status, error.response?.data);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 消费贷相关API\r\nexport const consumerCreditAPI = {\r\n  // 获取授信状态\r\n  getStatus: (chatId) => api.get(`/consumer-credit/status?chatId=${chatId}`),\r\n  \r\n  // 完成步骤\r\n  completeStep: async (chatId, step) => {\r\n    const response = await api.post('/consumer-credit/step', { chatId, step });\r\n    return response.data;\r\n  },\r\n  \r\n  // 初始化授信流程（允许自定义起始步骤）\r\n  startCreditProcess: async (chatId, startStep = 1) => {\r\n    console.log('startCreditProcess called with chatId:', chatId, 'startStep:', startStep);\r\n    console.log('Request URL:', `${API_BASE_URL}/consumer-credit/step`);\r\n    console.log('Request config:', {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      withCredentials: false,\r\n      timeout: 30000\r\n    });\r\n    try {\r\n      const response = await api.post('/consumer-credit/step', { chatId, step: startStep }, {\r\n        headers: { 'Content-Type': 'application/json' },\r\n        withCredentials: false,\r\n        timeout: 30000\r\n      });\r\n      console.log('Response received:', response);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Request failed:', error);\r\n      console.error('Error config:', error.config);\r\n      console.error('Error response:', error.response);\r\n      console.error('Error request:', error.request);\r\n      throw error;\r\n    }\r\n  },\r\n  // setAuthorization: async (chatId, authorized) => {\r\n  //   // 前端不再直接调用后端更新授权状态；统一通过聊天请求上下文传递\r\n  //   const response = await api.post('/consumer-credit/authorize', { chatId, authorized });\r\n  //   return response.data;\r\n  // },\r\n};\r\n\r\n// 助手通用聊天API\r\nexport const assistantAPI = {\r\n  /**\r\n   * 与后端助手聊天\r\n   * @param {string} chatId - 会话ID\r\n   * @param {string} userMessage - 用户输入\r\n   * @param {object} [context] - 可选的用户上下文\r\n   * @returns {Promise<{text: string, card: object|null, raw: any}>} 助手回复结构化结果\r\n   */\r\n  chat: async (chatId, userMessage, context = {}) => {\r\n    try {\r\n      const body = {\r\n        chatId,\r\n        userMessage,\r\n      };\r\n      if (context) {\r\n        const { userName, availableCredit, currentLoanPlan, recentRepaymentStatus, maxLoanAmount, authorized } = context;\r\n        if (userName) body.userName = userName;\r\n        if (availableCredit != null) body.availableCredit = availableCredit;\r\n        if (currentLoanPlan) body.currentLoanPlan = currentLoanPlan;\r\n        if (recentRepaymentStatus) body.recentRepaymentStatus = recentRepaymentStatus;\r\n        if (maxLoanAmount != null) body.maxLoanAmount = maxLoanAmount;\r\n        if (authorized != null) body.authorized = authorized;\r\n      }\r\n      const response = await api.post('/assistant/chat', body);\r\n      const data = response.data;\r\n      let textReply = '';\r\n      let cardObj = null;\r\n      if (typeof data === 'string') {\r\n        textReply = data;\r\n      } else if (data && typeof data === 'object') {\r\n        const card = data?.data?.card;\r\n        if (card) {\r\n          // 兼容后端 payload.offer 以字符串形式返回：解析为对象并提升为 card.offer\r\n          if (card.payload && typeof card.payload.offer === 'string') {\r\n            try {\r\n              const parsed = JSON.parse(card.payload.offer);\r\n              card.offer = parsed;\r\n              card.payload.offer = parsed;\r\n            } catch (e) {\r\n              console.warn('解析 payload.offer 失败:', e);\r\n            }\r\n          }\r\n          cardObj = card;\r\n        }\r\n        if (card && (card.content || card.text)) {\r\n          textReply = card.content || card.text;\r\n        } else if (data.payload && typeof data.payload === 'string') {\r\n          textReply = data.payload;\r\n        } else if (data.message && typeof data.message === 'string') {\r\n          textReply = data.message;\r\n        } else {\r\n          // 无明确文本时不再返回JSON字符串，避免在聊天窗显示原始结构\r\n          textReply = '';\r\n        }\r\n      } else {\r\n        textReply = '';\r\n      }\r\n      return { text: textReply, card: cardObj, raw: data };\r\n    } catch (error) {\r\n      console.error('Assistant chat failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}